
-------------------------------------------DISTRIBUTED SCANNER---------------------------------------------------
----------------------------------Τεκμηρίωση του Project3 (MobileManager)----------------------------------------
-----------------------------------------------------------------------------------------------------------------



1)ΣΤΟΙΧΕΙΑ ΟΜΑΔΑΣ
-Μελή:
	Καλτζιάς Πετρος 			Α.Μ.: 1115201000052
	Κουρτογιάννης Απόστολος		Α.Μ.: 1115201000011
	Τσαούσης Λεωνίδας			Α.Μ.: 1115201200184
	
	
	
2)ΠΕΡΙΒΑΛΛΟΝ ΑΝΑΠΤΥΞΗΣ
-Android Studio 1.5.1, σε λειτουργικό σύστημα ubuntu/xubuntu.
-Δοκιμάστηκε σε συσκευές 
	> Sony Xperia M (C1905) με Android 4.3 "JellyBean"
	> LG Google Nexus 5 	με Android 6.0 "Marshmallow"



3)ΔΟΜΗ ΕΦΑΡΜΟΓΗΣ
-Απαραίτητες για τη λειτουργία της Android εφαρμογής είναι οι υπομονάδες του Distributed Scanner που αναπτύχθηκαν
 σε προηγούμενα στάδια AggregatorManager και SoftwareAgent (βλέπε Project2 και Project1 αντίστοιχα)
 
-Η εφαρμογή "MοbileManager" ("MM") αποτελέιται απο 7 packages που ομαδοποιούν κλάσσεις κοινής λειτουργικότητας:
 (root: dsMM.mobileManager)
			> showSAs		- βασικό παράθυρο εφαρμογής, λίστα των ενεργών SA
			> terminateSA	- για τον τερματισμό κάποιου ενεργού SA
			> showResults	- για την προβολή αποτελεσμάτων των nmap jobs  
			> showJobs		- δευτερέυον παράθυρο εφαρμογής, λίστα των nmap jobs επιλεγμένου SA
			> insertJob		- για την ανάθεση νέας nmap job σε κάποιον SA 
			> dbOperation	- για την προσωρινή αποθήκευση δεδομένων στην SQLite βάση εν απουσία σύνδεσης
			> users 		- για τις λειτουργίες που σχετίζονται με τους χρήστες
							  (login, logout, register, session management)



4)GRADLE & DEPENDECIES
-Για την δημιουργία (build), αποσφαλμάτωση (debug), δοκιμή (test) και την παραγωγή του εκτελέσιμου APK (assemble)
 χρησιμοποιήθηκε το εργαλείο "Graddle"
 
-Xρησιμοποιήθηκαν οι εξείς εξωτερικές βιβλιοθήκες και εξαρτήσεις (απόσπασμα απο το build.graddle)
	dependencies {
		<!--	Για την δικτυακή επικοινωνία με το πρωτόκολλο REST -->
		compile 'org.springframework.android:spring-android-rest-template:1.0.1.RELEASE'
		compile 'com.fasterxml.jackson.core:jackson-databind:2.3.2'

		<!--	Για την υποστήριξη θεμάτων τύπου Material (SDK 22) σε παλαιότερες εκδόσεις -->
	    compile 'com.android.support:design:22.2.1'
		compile 'com.android.support:appcompat-v7:22.2.1'
	}



4)ΠΡΟΣΘΗΚΕΣ ΣΤΟΝ AggregatorManager / ΠΡΩΤΟΚΟΛΛΟ ΕΠΙΚΟΙΝΩΝΙΑΣ 
-Διορθώθηκαν διάφορα bugs. (login, services, DB access...)

-Προστέθηκε η λειτουργία αποδοχής ή απόρριψης αιτήματος εγγραφής χρήστη απο την Android εφαρμογή μέσω ενος
 εμφανιζόμενου παραθύρου (popup) κατοπιν επιβεβαίωσης της μοναδικότητας του χρήστη στην υπάρχουσα βαση  

-Η εφαρμογή επικοινωνεί με τον Aggregator Manager χρησιμοποιώντας την τεχνολογία REST (REpresentational STate)
 πανω απο το πρωτόκολλο HTTP 1.1. Για την υποστήριξη των διαφόρων λειτουργιών του MM αποστέλλωνται οι παρακάτω
 αιτήσεις (H διευθυνση του AM εισάγεται απο τον χρήστη κατα την εκκίνηση της εφαρμογής - βλ. ΟΔΗΓΙΕΣ)
		> Σύνδεσης χρήστη:
		  	HTTP POST request στο URL <AMurl>/users/login
		  	με τα διαπιστευηρια του χρήστη κωδικοποιημένα σε plaintext (String) με τη μορφή "username,password" 
		  	στο σώμα της αίτησης. Επιστρέφεται απόκριση που στο σώμα περιέχει το αποτέλεσμα της διαδικασίας.  
		> Εγγραφης νέου χρήστη:
		  	HTTP PUT request στο URL <AMurl>/users/
		  	με τα διαπιστευηρια του χρήστη κωδικοποιημένα σε plaintext (String) με τη μορφή "username,password" 
		  	στο σώμα της αίτησης. 
		  	Επιστρέφεται απόκριση με status code "200-ΟΚ" για επιτυχία, "406-Not Accepted" σε αντίθετη περίπτωση
		> Αποσύνδεσης χρηστη:
			HTTP POST request στο URL <AMurl>/users/logout
		  	με τα διαπιστευηρια του χρήστη κωδικοποιημένα σε plaintext (String) με τη μορφή "username,password" 
		  	στο σώμα της αίτησης. 
		
		> Λίστας ενεργών SA:
		  	HTTP GET request στο URL <AMurl>/softwareagents
		  	Επιστρέφεται απόκριση που στο σώμα περιέχει τη λίστα σε μορφή κειμένου ( ArrayList.toString() )
		> Τερματισμού SA:
		  	HTTP DELETE request στο URL <AMurl>/softwareagent/?hash=<sa_hash>
		  	με το απαράιτητο sa_hash-αναγνωριστικό του SA που θα τερματιστεί να περνάει σαν query paramater
		  	μεσα απο το URL (κενό σώμα αίτησης)
		> Λίστας nmap jobs που εχουν αποδοθέι (απο AM και MM) σε επιλεγμένο SA:
			HTTP GET request στο URL <AMurl>/nmapjobs?hash=<sa_hash>
			με το απαράιτητο sa_hash-αναγνωριστικό του SA για τον οποιο ζητήται η λίστα να περνάει σαν
			query paramater	μεσα απο το URL (κενό σώμα αίτησης)
		  	Επιστρέφεται απόκριση που στο σώμα περιέχει τη λίστα σε μορφή κειμένου ( ArrayList.toString() )
		> Διαγραφής περιοδικής nmap job:
		  	HTTP DELETE request στο URL <AMurl>/nmapjobs/<id>/
		  	με τo id της nmap job που πρέπει να διαγραφεί να περνάει σαν query paramater μεσα απο το URL
		> Εισαγωγής νέας nmap job για επιλεγμένο SA:
		  	HTTP PUT request στο URL <AMurl>/nmapjobs?hash=<sa_hash>
		  	με το απαράιτητο sa_hash-αναγνωριστικό του SA για τον οποίο ανατίθεται η nmap job να περνάει σαν 
		  	query paramater μεσα απο το URL και τα στοιχεία αίτησης της nmapjob σε plaintext (String) 
		  	στο σώμα της αίτησης 	  		
		  	
		> Προβολής αποτελεσμάτων επιλεγμένου SA:
		  	HTTP GET request στο URL <AMurl>/results?hash=<sa_hash>
		  	με το απαράιτητο sa_hash-αναγνωριστικό του SA για τον οποιο ζητήται η λίστα να περνάει σαν
		  	query paramater μεσα απο το URL (κενό σώμα αίτησης)
		  	Επιστρέφεται απόκριση που στο σώμα περιέχει τη λίστα σε μορφή κειμένου ( ArrayList.toString() ) 			  	
		> Προβολής αποτελεσμάτων απο όλους τους SA:
		  	HTTP GET request στο URL <AMurl>/results/
		  	Επιστρέφεται απόκριση που στο σώμα περιέχει τη λίστα σε μορφή κειμένου ( ArrayList.toString() ) 			  	

 Οι κωδικοποιήσεις που αναφέρθηκαν παραπάνω χρησιμοποιούνται παντού με την
 ιδια μορφη για τα ιδια αντικείμενα (λιστα αποτελεσμάτων, SA, nmap jobs, user credentials...) σε 
 όλη την έκταση του κώδικα.
 						
				
						
5)ΣΥΜΒΑΤΟΤΗΤΑ Android
-Οπως προαναφερθηκε, δοκιμάστηκε επιτυχώς σε συσκευές με εκδόσεις:
 	> Android 4.3 "JellyBean"	(SDK 18)
 	> Android 6.0 "Marshmallow" (SDK 23)

-Το εκτελέσιμο που συμπεριλαμβάνεται (MobileManager.apk) εχει μεταγλωττιστεί με την εκδοση SDK 22 και υποστηρίζει
 συσκευες που τρέχουν Android 4.1.2 "JellyBean" (SDK 16) 
 	


7)ΟΔΗΓΙΕΣ ΕΚΤΕΛΕΣΗΣ DistributedScanner
-Διασύνδεση μέσω δικτύου. Θα πρέπει να εκτελέστουν τα παρακάτω βήματα:
	α) *Στον υπολογιστή που θα τρέξει ο AM, επιλογή μιας εκ των διευθύνσεων (IPv4) που του εχουν αποδοθεί,
	    που εχει πρόσβαση στο ίντερνετ
	β) *Πρίν την εκτέλεση του AM, θα πρέπει στον κώδικά του να οριστεί η διέυθυνση και η θύρα (listenning socket) 
		στην οποία θα ακούει για εισερχόμενες συνδέσεις.
		{ Αρχείο <ProjectRoot>/src/main/java/dsAM/aggregatorManager/Main.java : γραμμή 41 : μέθοδος getBaseURI() }   
	γ)  Εκτέλεση AM (κατοπιν εγκαταστασης της βάσης οπως ορίζεται στις σχετικές οδηγίες Project2/README.txt)
	 	και σύνδεση χρήστη-διαχειριστή στον AM
	-) 	Απο αυτό το σημείο και μετά μπορούν να λειτουργήσουν και διάφοροι SA στον ίδο αλλα και σε διαφορετικό
		υπολογιστή απο τον AM με την προυπόθεση οτι βρίσκονται εντος του ίδιου υποδίκτυου
	δ)  Εκκίνηση ΜΜ στην Android συσκευη και συμπλήρωση των στοιχείων του AM (IP address + port) με τον οποίο
	    θα επικοινωνεί
	ε)  Συμπλήρωση των στοιχείων χρήστη (login) ή υποβολή φόρμας εγγραφής νέου χρήστη (register) που αποστέλλεται
	    στον υπολογιστή με τα προηγουμένως εισαχθέντα στοιχεία. 
	    
  *Τα βήματα (α) και (β) απαιτώνται παρα τη λογική τους ασυνέπεια για την υποστήριξη "ευέλικτου" AM (αντι για τον 
   κλασσικό server) που θα μπορεί να εκτελείται σε διάφορους υπολογιστές, οπως ζητήται στα πλαίσα της άσκησης 
   και δεδομένης της έλλειψης κατοχυρωμένου domain name που συνεπάγεται αυτό. Για μια εκτενέστερη περογραφή του
   προβλήματος βλέπε ΣΧΕΔΙΑΣΤΗΚΕΣ ΕΠΙΛΟΓΕΣ.	    
	    
-Αν η αποστολή είναι επιτυχής (και οι δύο επικοινωνούντες πλευρες είναι συνδεδεμένες στο ίδιο υποδίκτυο) 
 παρουσιάζεται το κύριο παράθυρο της εφαρμογής που αριθμεί τους ενεργούς SA	σε μια λίστα όπως τους 
 εχει καταγράψει ο ΑΜ (με βάση το αναγνωριστικό τους hash)
 
-Αν μετα την επιτυχη σύνδεση στον ΜΜ η εφαρμογή τερματίσει είτε κατόπιν δράσης του χρήστη είτε απο το σύστημα
 σε επόμενες επανεκκινήσεις, δε θα ζητηθεί απο τον χρήστη να ξανα-εισάγει τα στοιχεία του και θα πλοηγηθέι 
 αυτόματα στο κύριο παράθυρο, διατηρώντας έτσι την σύνοδό του (session) μεχρις ότου ηθελήμένα αποσυνδεθεί (logout)  
 
-Απο το κύριο παράθυρο προσφέρεται η δυνατότητα αποσύνδεσης, προβολής αποτελεσμάτων, ανανέωσης της λίστας με 
"τράβηγμα προς τα κάτω" (pull-down refresh)

-Για κάθε εναν απο τους SA αυτούς προσφέρονται οι επιλογές τερματισμού, εισαγωγής νέας nmap job και προβολής των 
 nmap jobs που του έχουν ανατεθέι (απο AM ή MM)
 
-Μέσα απο την τελευταία επιλογή ανοίγει το δευτερέυον παράθυρο της εφαρμογής με τη λίστα των nmap jobs 
 συγκεκριμένου SA. Για κάθε μία απο αυτές ο χρήστης μπορεί να δεί τα αποτελέσματά της, να δώσει εντολή
 επανεκτέλεσής της, ή -σε περιπτωση περιοδικής- να σταματήσει την εκτέλεση της. Η πλοήγηση διατηρήται και με 
 πάτημα του "back button" ο χρήστης επιστρέφει στο κυριο παράθυρο.    

-Η εφραμογή διακόπτεται/τερματίζεται όπως οποιαδήποτε άλλη εφαρμογή Android
	
	

8)ΣΧΕΔΙΑΣΤΙΚΕΣ ΕΠΙΛΟΓΕΣ
	β) Καθορισμός διέυθυνσης AM και εισαγωγής της στον MM  
 		> Στα πλάισια ενος παραδοτέου προγράμματος που θα πρέπει να τρέξει σε διάφορους υπολογιστές περαν αυτού 
 		  στον οποίο αναπτύχθηκε (πχ. του διορθωτή, του εργαστηρίου, κάποιου τρίτου χρηστη...) καθίσταται αδύνατη 
 		  η τήρηση του παραδοσιακού μοντέλου client-server.
 		
 		> Αυτο επιβάλλεται καθώς δεν είναι δυνατο να τρέχει ο AM σε εναν υπολογιστή μόνιμα ανοιχτό, με σταθερή, 
 		  δημόσια γνωστή διέυθυνση και θύρα οπως επιτάσσεται. Δεν γίνεται (και ευτυχως δεν ζητήθηκε) να μισθωθεί 
 		  domain name και να καταχωρηθεί η αντιστοίχηση αυτή σε δημόσιο DNS ωστε να παρακάμφθει το στάδιο ευρεσης
 		  της IP του υπολογιστη (βήματα α-β).
 		  
 		> Επίλογή της διέυθυνσης αυτής κατα την εκτέλεση ("at runtime") επίσης δεν είναι εφικτή καθώς το 
 		  συγκεκριμένο τμήμα κώδικα εκτελείται πριν την κανονική λειτουργία του πργοράμματος (Main.class)
 		  και δεν επιδέχετει παραμετροποίηση.     
 		
 		> Επιλογές cloud hosting (πχ. ~oceanos) που προτάθηκαν απορρίφθηκαν αμεσα διότι θεωρήται οτι ξεφέυγει 
		  σημαντικά απο τα όρια αυτού του μαθήματος και της άσκησης. Σε αυτο το περιορισμένο σε πόρους, χρόνο και 
		  παρεχόμενη τεχνογνωσία περιβάλλον θεωρηθηκε τουλάχιστον κατακριτέα μια τέτοια, μαλλον πρόχειρη και
		  ελλιπώς εξετασμένη απαίτηση 
		  
	α) Βαση προσωρινής αποθήκευσης
 		> Κατα την απόπειρα οποιασδήποτε επικοινωνίας με τον AM (μετά την σύνδεση χρήστη) ελέγχεται η κατάσταση 
 		  συνδεσιμότητας του κινητού στο δίκτυο.
 		
 		> Αν ανιχνευθεί απουσία σύνδεσης η δουλειά που είχε δρομολογηθέι (εισαγωγή nmap job, τερματισμός SA, 
 		  επανεκτέλεση ή διαγραφή nmap job) αναβάλλεται και αποθηκέυεται προσωρινά -κατόπιν ενημέρωσης του
 		  χρήστη- σε μια -μη πτητική- SQLite βάση με τον εξής μοναδικό πίνακα με 4 στήλες:
				 			TABLE NAME "nmapjobs"{
				 				COLUMN NAME "id"		TYPE INTEGER
				 				COLUMN NAME "params"	TYPE TEXT	
				 				COLUMN NAME "periodic"	TYPE INTEGER
				 				COLUMN NAME "hash" 		TYPE TEXT
				 			}  
 		
 		> Με το που ανιχνευθεί σύνδεση στο internet (ειτε μέσω wifi είτε μέσω δεδομένων κινητής τηλεφωνίας)
 		  τα περιεχόμενα της βάσης αποστέλλωνται στον AM και εμφανίζεται η σχετική, διαρκής ειδοποίηση που 
 		  γνωστοποιεί την πρόοδο της αποστολής (progress-bar notification) 
 
 	  	> Παρότι ο παραπάνω πίνακας δεν εχει (ρητό) πρωτευον κλειδί και επιτρέπεται η εισαγωγή πολλών nmap jobs 
 	  	  με κοινό id=-1, όπως και στην αντίσοιχη επιλογή μέσα απο τον AM, μόνο ένας SA μπορεί να τερματιστεί
 	  	  κατοπιν εντολής. Γεγονός που οφείλεται στη σχεδιαστική οδηγία-απαίτηση η βάση του AM να κρατά 
 	  	  όλο το ιστορικό των συναλλαγών.

