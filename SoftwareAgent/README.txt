
--------------------------------DISTRIBUTED SCANNER--------------------------------------
-------κοινο README για τα Project1 (SoftwareAgent) και Project2 (AggregatorManager)-----
-----------------------------------------------------------------------------------------



1)ΣΤΟΙΧΕΙΑ ΟΜΑΔΑΣ
-Μελή:
	Καλτζιάς Πετρος 			Α.Μ.: 1115201000052
	Κουρτογιάννης Απόστολος		Α.Μ.: 1115201000011
	Τσαούσης Λεωνίδας			Α.Μ.: 1115201200184
	
2)ΠΕΡΙΒΑΛΛΟΝ ΑΝΑΠΤΥΞΗΣ
-Netbeans 8, Eclipse Kepler σε λειτουργικό σύστημα ubuntu. Δοκιμαστικες εκτελέσεις 
 εγιναν και σε κελυφος bash (περιβάλλον γραμμής εντολών).

3)ΔΟΜΗ ΕΦΑΡΜΟΓΗΣ
-Η εφαρμογή "DistributedScanner" ("DS") αποτελέιται απο 2 projects ο κώδικας καθενος 
 βρίσκεται σε ξεχωριστό git-repository
	α) το πρόγραμμα πελάτη (client) "SoftwareAgent" ("SA")
	   στο repository https://anapgit.scanlab.gr/Tsaousis/Project1.git αποτελούμενο 
	   απο 3 packages που ομαδοποιούν κλάσσεις κοινής λειτουργικότητας:
			* DSsa.SoftwareAgent 				- για την βασική λειτουργικότητα  
										  		  του προγράμματος
			* DSsa.SoftwareAgent.helpers		- για βοηθητικες κλάσσεις 
			* DSsa.SoftwareAgent.services		- για την δικτυακή επικοινωνία 
	β) το πρόγραμμα εξυπηρετητή (server) "AggregatorManager" ("AM")
	   στο repository https://anapgit.scanlab.gr/Tsaousis/Project2.git αποτελούμενο 
	   απο 4 packages που ομαδοποιούν κλάσσεις κοινής λειτουργικότητας:
			* DSam.AggregatorManager			- για την βασική λειτουργικότητα
												  του προγράμματος
			* DSam.AggregatorManager.db			- για την επικοινωνία με τη βάση
												  (Data Access Objects) 
			* DSam.AggregatorManager.services	- για την δικτυακή επικοινωνία
			* DSam.AggregatorManager.gui		- για την γραφική διεπαφή 
			* Dsam.AggregatorManager.gui.images	- για τα εικονιδια της οπτικης διεπαφης
	καθώς και τα απαραίτητα αρχεία για τη δημιουργία της βάσης δεδομένων που θα 
	διαχειρίζεται ο εξυπηρετητης (βλέπε ΟΔΗΓΙΕΣ ΕΚΤΕΛΕΣΗΣ)
			* DSschema.sql	- το .sql script που θα δημιουργήσει τη βάση
			* DSmodel.mwb	- το μοντέλο Οντοτήτων-Συσχετίσεων της παραπάνω βασης
							  οπως δημιουργήθηκε απο το MySQL Workbench  			

4)ΠΡΩΤΟΚΟΛΛΟ ΕΠΙΚΟΙΝΩΝΙΑΣ
-Οι δυο προαναφερθείσες οντότητες επικοινωνουν χρησιμοποιώντας 
 την τεχνολογία REST (REpresentational STate) πανω απο το πρωτόκολλο HTTP 1.1
 H διευθυνση του AM (ΑΜurl) γνωστοποιείται στον SA μεσω της αντίστοιχης παραμέτρου
 κατα την αρχικοποίηση του προγράμματος (βλέπε ΟΔΗΓΙΕΣ ΕΚΤΕΛΕΣΗΣ)
	α) επικοινωνίες SA -> AM
		* Αιτηση Εγγραφης:
		  	HTTP PUT request στο URL <AMurl>/softwareagent/
		  	με τα απαραίτητα στοιχεία αίτησης σε plaintext (String) διαχωριζόμενα 
		  	απο ενα χαρακτήρα σωλήνωσης '|' στο σώμα της αίτησης  
		* Αιτηση για ΝmapJobs:
		  	HTTP GET request στο URL <AMurl>/nmapjobs?hash=<sa_hash>
		  	με το απαράιτητο sa_hash-αναγνωριστικό του SA να περνάει σαν
		  	query paramater μεσα απο το URL (κενό σώμα αίτησης)
		* Αποστολή αποτελεσμάτων:
			HTTP POST request στο URL <AMurl>/nmapjobs/<id>/
			με τα αποτελέσματα σε plaintext (String) στο σώμα της αίτησης για την
			NmapJob με id που καθορίζεται στο URL (<id>)
	β) επικοινωνίες ΑΜ -> SA
		* Aπόκριση εγγραφής:
			Status Code "200-ΟΚ" 		- σε περιπτωση επιβεβαίωσης 
			Status Code "406-Bad Request"	- σε περίπτωση απόρριψης
		* Αποκριση σε αιτημα για NmapJobs:
			Μια κωδικοποιημένη σε String [<item>,<item>,...] λίστα απο 
			κωδικοποιημένες σε String NmapJobs με τη 
			μορφή "id,param,periodic,period"	
			ΠΑΡΑΤΗΡΗΣΗ: Σε αυτη τη μορφη μπορεί να είναι κωδικοποιημένες
			και πιθανές εντολές τερματισμού του SA και 
			διακοπής περιοδικού NmapJob	
 Οι κωδικοποιήσεις που αναφέρθηκαν παραπάνω χρησιμοποιούνται παντού με την
 ιδια μορφη για τα ιδια αντικείμενα σε όλη την έκταση του κώδικα.
 						
						
5)MAVEN
-Για την επιλύση των εξαρτήσεων απο διαφορες βιβλιοθήκες χρησιμοποιήθηκε 
 το Maven μεσω του οποίου γίνεται και η δημιουργία/εκτέλεση του κάθε 
 προγράμματος (βλεπε ΟΔΗΓΙΕΣ ΕΚΤΕΛΕΣΗΣ)
-Οι εξαρτήσεις που κατεβάζονται (αν δεν υπάρχουν) κατα τη δημιουργία του κάθε
 προγράμματος είναι οι εξείς: 
	* jersey-grizzly: 		REST API (server)
	* mysql-connector-java:	JDBC API
	* jersey-client:		REST API (client)
-Σε κάθε project συμπεριλαμβάνεται και το αντίστοιχο pom.xml αρχείο που θα 
 ρυθμισει την παραπάνω διαδικασία και θα πρέπει να βρίσκεται σε συγκεκριμένο 
 μονοπάτι σε σχέση με τον κώδικα		
	
	
6)ΤΕΚΜΗΡΙΩΣΗ
-Εκτος απο αυτο το αρχείο README περιλάμβάνεται σε κάθε project και 
 ο φάκελος του Javadoc για το αντίστοιχο πρόγραμμα  

7)ΟΔΗΓΙΕΣ ΕΚΤΕΛΕΣΗΣ
	α)για τον AggregatorManager
		  i.Δημιουργία της βάσης δεδομένων με το αρχείο DSschema.sql
			και εκκίνηση του MySQL server. Θα πρέπει επίσης να εισαχθεί στον 
			πίνακα "users" τουλάχιστον μια πλειάδα ωστε να είναι δυνατη η 
			σύνδεση του διαχειριστή με τα στοιχεία αυτά.
		 ii.Ληψη των απαραίτητων αρχείων κώδικα απο το git και διατήρηση
			της υπάρχουσας δενδρικής δομής τους (συμπεριλαμβανομένου του
			pom.xml) τοποθέτηση τους στον υποθετικό φάκελο Project2/
		  -.(εγκατασταση mvn αν δεν υπάρχει ήδη).
		iii.Δημιουργία: στον φάκελο Project2/
			mvn clean install -DskipTests
		 iv.Εκτέλεση: στον φάκελο Project2/
		 	mvn exec:java -Dexec.args="amprop.conf"
		 	
		 	Μοναδικό όρισμα που μπορεί να δεχτεί είναι η τοποθεσία
		 	αρχείου απο το οποίο θα φορτωθούν οι παράμετροι. Για 
		 	οδηγιες συγγραφης αυτου του αρχείου βλέπε ΣΧΕΔΙΑΣΤΗΚΕΣ
		 	ΕΠΙΛΟΓΕΣ. Απο προεπιλογή φορτώνονται οι παράμετροι του
		 	αρχείου default_amprop.conf στον κατάλογο Project2/ 
		  v.Τερματισμός του προγράμματος (συμπεριλαμβανομένου του 
		    server και της γραφικής διεπαφής) μέσα απο την γραφική 
		    διεπαφή (κλείσιμο παραθύρου).		 		 
	β)για τον SoftwareAgent
		  i.Ληψη των απαραίτητων αρχείων κώδικα απο το git και διατήρηση
			της υπάρχουσας δενδρικής δομής τους (συμπεριλαμβανομένου του
			pom.xml) τοποθέτηση τους στον υποθετικό φάκελο Project1/
		  -.(εγκατασταση mvn αν δεν υπάρχει ήδη)
		 ii.Δημιουργία: στον φάκελο Project1/
			mvn clean install
		iii.Εκτέλεση: στον φάκελο Project1/
		 	sudo mvn exec:java -Dexec.mainClass="dsSA.softwareAgent.Main" \
		 		-Dexec.args="saprop.conf"
		 
		 	Μοναδικό όρισμα που μπορεί να δεχτεί είναι η τοποθεσία
		 	αρχείου απο το οποίο θα φορτωθούν οι παράμετροι. Για 
		 	οδηγιες συγγραφης αυτου του αρχείου βλέπε ΣΧΕΔΙΑΣΤΗΚΕΣ
		 	ΕΠΙΛΟΓΕΣ. Απο προεπιλογή φορτώνονται οι παράμετροι του
		 	αρχείου default_saprop.conf στον κατάλογο Project1/ 	 			   
	     iv.Τερματισμός προγράμματος με σήμα Ctrl+C (ή SIGKILL)


8)ΣΧΕΔΙΑΣΤΙΚΕΣ ΕΠΙΛΟΓΕΣ
-Επιλέξαμε να μην χρησιμοποιήσουμε προσωρινή μνήμη (Cache) για τους 
 παρακάτω λόγους:
	α)Η αρχική εκφώνηση δεν το ζητούσε και στις πρώτες διαλέξεις 
	  αναφέρθηκε ως προαιρετική λειτουργία. Αυτο μας οδήγησε σε εναν
	  αρχικό σχεδιασμό χωρις αυτη τη λειτουργία
	β)Η δομή κάθε προγράμματος απλοποιείται δραματικά χωρίς αυτη και
	  βοηθαει στην ευκολη εποπτεία και διόρθωση του κώδικα
	γ)Η λειτουργικότητα υλοποιείται απευθείας απο τη βάση με
	  κάποιες στήλες που διατηρούν βοηθητικά στοιχέια (πχ. assigned)
	δ)Σε σχετικά posts στην πλατφόρμα επικοινωνίας με τους βοηθούς
	  (και διορθωτες) κατέστη σαφές οτι "...είμαστε software 
	  engineers πρέπει κάποια στιγμή να αρχίσουμε να σκέφτομαστε 
	  out of the box!!..." καθώς και να "...Μη θέλουμε σε όλα μια 
	  επιβεβαίωση για το τι πρέπει να κάνουμε..." θα θέλαμε λοιπον 
	  να σεβαστούν αυτη την "συμβουλη".   
	ε)Γνωστοποιήθηκε πολύ αργά στην πορεία οτι μια τετοια 
	  λειτουργικότητα είναι απαράιτητη γεγονός ανάρμοστο καθώς
	  απαιτούσε την ριζική αλλαγή του κωδικα που δεν ήταν δυνατή 
	  εντος της διορίας.     
   	στ)Η κλίμακα της εφαρμογής είναι μικρη - εκπαιδευτικού σκοπού 
	  και δεν κρίθηκε απαραίτητη μια βελτιστοποίηση αποδόσης για την
	  ελαχιστοποίηση των (λιγοστών) επερωτημάτων στην βάση.   
	
-Υποστηρίζεται η λειτουργία των δύο όντοτήτων στον ίδιο υπολογιστή
 ακομα και υπο την απουσία λειτουργικής κάρτας δικτύου. Σε αυτή την
 περίπτωση στα στοιχεία εγγραφής εχουν τις εξέις αλλαγές:
 	* interface mac:	NO-NIF
 	* inerface ip:		127.0.0.0 (loopback)
 	* am_url:		localhost:9998
 	
-Υποστηρίζεται η λειτουργία πολλάπλών SA's απο τον ιδιο υπολογιστή
 παρότι αυτο θα προκαλλούσε collision στα πανομοιότυπα hashes.
 Πλεον αντι για το hash αποστέλλεται το αποτέλεσμα της πράξης XOR
 που εφαρμαζεται σε αυτό με εναν τυχαίο αριθμό ίδιου πλήθους
 bytes διατηρόντας την "τυχαιότητα" του αρχικού.

-Εφόσον η εντολή τερματισμού του SA δημιουργεί ένα nmapjob με id=-1,φυσικό
επακόλουθο είναι ότι μόνο ένας SA μπορεί να τερματιστεί με αυτόν τον τρόπο.
(Εφόσον η βάση κρατά όλο το ιστορικό των nmap-jobs)
 	 
-Υποστηριζόμενες παράμετροι που μπορεί να οριστούν στο property 
 file κάθε οντότητας:
 	α)SoftwareAgent (ενδεικτικο αρχείο "saprop.conf")
		ΑΜexists..............Yπαρξη ΑΜ (=true) ή όχι (=false) 
		ΑΜurl.................Διέυθυνση του AM
		Jobs File.............Το αρχείο με nmpap jobs (αντι AM)
		Lines per Read........Ποσες γραμμές με nmap jobs 
			θα διαβάζονται καθε φορά 
		Pool Size.............Το σύνολο των onetime threads
			που θα δημιουργηθούν αρχικά
		Verbose...............Παραμετροποίηση της εξόδου. Αν	
			τεθεί σε false δεν τυπώνονται καθόλου μυνήματα
			κατα την εκτέλεση (συνιστώμενη ρύθμιση:true)
		RegisterRequestInterval.....Διαστημα αναμονης μεταξύ 
			διαδοχικών αιτήσεων εγγραφής
		JobRequestInterval..........Διαστημα αναμονης μεταξύ 
			διαδοχικών αιτήσεων για NmapJobs
	β)AggregatorManager (ενδεικτικό αρχείο "amprop.conf")
		DBuser................To username για την βαση
		DBpass................To password για τη βάση
		Verbose...............Παραμετροποίηση της εξόδου. Αν	
			τεθεί σε false δεν τυπώνονται καθόλου μυνήματα
			κατα την εκτέλεση (συνιστώμενη ρύθμιση:true)
		JobRequestInterval..........Διαστημα αναμονης μεταξύ 
			διαδοχικών αιτήσεων για NmapJobs απο τους SA.
				
